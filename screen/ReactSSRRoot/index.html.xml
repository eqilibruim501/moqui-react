<?xml version="1.0" encoding="UTF-8"?>
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-2.0.xsd" require-authentication="false" track-artifact-hit="false"
        default-menu-include="false" standalone="true">
    <actions>
        <script><![CDATA[
            import jdk.nashorn.api.scripting.NashornScriptEngine
            import javax.script.ScriptEngineManager
            import javax.script.ScriptException
            import java.io.InputStream
            import java.io.InputStreamReader
            import java.io.Reader
            import java.util.List
            import org.moqui.resource.ResourceReference
            import org.moqui.context.ExecutionContext
            import com.fasterxml.jackson.databind.ObjectMapper

    Map<String, ResourceReference> jsFileMap = new LinkedHashMap<>()
    jsFileMap.put('nashorn-polyfill',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/nashorn-polyfill.js"))
    jsFileMap.put('vendor', null)
    jsFileMap.put('app', null)
    jsFileMap.put('print-app',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/print-app.js"))
    // jsFileMap.put('1.counter',null)

    Map<String, ResourceReference> cssFileMap = new LinkedHashMap<>()
    cssFileMap.put('app', null)

    ResourceReference rr = ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/dist")
    for (ResourceReference fileRr in rr.getDirectoryEntries()) {
        if (!fileRr.isFile()) continue
        String fileName = fileRr.getFileName()
        if (fileName.endsWith(".js")) {
            if (fileName.startsWith("vendor.")) jsFileMap["vendor"] = fileRr
            if (fileName.startsWith("app.")) jsFileMap["app"] = fileRr
            if (fileName.startsWith("1.counter.")) jsFileMap["1.counter"] = fileRr
        } else if (fileName.endsWith(".css")) {
            if (fileName.startsWith("app.")) cssFileMap["app"] = fileRr
        }
    }

    ec.context.put('jsFileMap', jsFileMap)
    ec.context.put('cssFileMap', cssFileMap)

public class React {
    private ExecutionContext ec

    React(ExecutionContext ec) {
        this.ec = ec
    }

    private ThreadLocal<NashornScriptEngine> engineHolder = new ThreadLocal<NashornScriptEngine>() {
        @Override
        protected NashornScriptEngine initialValue() {
            NashornScriptEngine nashornScriptEngine = (NashornScriptEngine) new ScriptEngineManager().getEngineByName("nashorn");
            try {
                for (ResourceReference rr in ec.context.jsFileMap.values()) {
                    if (rr == null) continue
                    ec.logger.info("jsFileMap: ${rr.getFileName()}")
                }

                for (Map.Entry<String, ResourceReference> entry in ec.context.jsFileMap) {
                    if (entry.getValue() == null) continue
                    ec.logger.info("Evaluating ${entry.getKey()}")
                    Object o = nashornScriptEngine.eval(new InputStreamReader(entry.getValue().openStream()))
                }
            } catch (ScriptException e) {
                throw new RuntimeException(e);
            }
            return nashornScriptEngine;
        }
    };

    public  String renderCommentBox(List<Object> comments) {
        try {
            Object html = engineHolder.get().invokeFunction("renderServer", comments);
            return String.valueOf(html);
        }
        catch (Exception e) {
            throw new IllegalStateException("failed to render react component", e);
        }
    }

    public String render() {
        try {
            ec.logger.info("start server rendering")
            Object html = engineHolder.get().invokeFunction("renderServer");

            return String.valueOf(html);
        }
        catch (Exception e) {
            throw new IllegalStateException("failed to render react", e);
        }
    }

    private Reader read(String location) {
        ResourceReference rr = ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/" + location)
        InputStream inputStream = rr.openStream()
        return new InputStreamReader(inputStream);
    }
}

        def comments = [
            ["author":"Peter Parker", "text":"This is a comment."],
            ["author":"John Doe","text":"This is *another* comment."]
        ]

        React react = new React(ec)

        String contentHtml = react.render();
        // String contentHtml = ""
        ec.context.put("content", contentHtml);

        ]]></script>

    </actions>
    <widgets>
        <render-mode>
            <text type="html" template="true" location="component://react-ssr/screen/ReactSSRRoot/includes/index.html.ftl"/>
        </render-mode>
    </widgets>
</screen>
