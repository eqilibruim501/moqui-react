<?xml version="1.0" encoding="UTF-8"?>
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-2.0.xsd" require-authentication="false" track-artifact-hit="false"
        default-menu-include="false" standalone="true">
    <actions>
        <script><![CDATA[
            import jdk.nashorn.api.scripting.NashornScriptEngine
            import jdk.nashorn.api.scripting.ScriptObjectMirror
            import jdk.nashorn.api.scripting.JSObject
            import java.util.function.Consumer
            import java.util.function.Function

            import javax.script.ScriptEngineManager
            import javax.script.ScriptException
            import javax.script.ScriptContext;
            import java.io.InputStream
            import java.io.InputStreamReader
            import java.io.Reader
            import java.util.List
            import org.moqui.resource.ResourceReference
            import org.moqui.context.ExecutionContext
            import com.fasterxml.jackson.databind.ObjectMapper

    Map<String, ResourceReference> jsFileMap = new LinkedHashMap<>()
    jsFileMap.put('nashorn-polyfill',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/nashorn-polyfill.js"))
    jsFileMap.put('nashorn-eventloop',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/nashorn-eventloop.js"))
    jsFileMap.put('vendor', null)
    jsFileMap.put('app', null)
    jsFileMap.put('print-app',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/print-app.js"))

    Map<String, ResourceReference> cssFileMap = new LinkedHashMap<>()
    cssFileMap.put('app', null)

    ResourceReference rr = ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/dist")
    for (ResourceReference fileRr in rr.getDirectoryEntries()) {
        if (!fileRr.isFile()) continue
        String fileName = fileRr.getFileName()
        if (fileName.endsWith(".js")) {
            if (fileName.startsWith("vendor.")) jsFileMap["vendor"] = fileRr
            if (fileName.startsWith("app.")) jsFileMap["app"] = fileRr
            if (fileName.startsWith("0.counter.")) jsFileMap["0.counter"] = fileRr
        } else if (fileName.endsWith(".css")) {
            if (fileName.startsWith("app.")) cssFileMap["app"] = fileRr
        }
    }

    ec.context.put('jsFileMap', jsFileMap)
    ec.context.put('cssFileMap', cssFileMap)

public class React {
    private ExecutionContext ec;
    private Map<String, ResourceReference> jsFileMap;

    private Object html;
    private Object error;
    private boolean promiseResolved;

    React(ExecutionContext ec, Map<String, ResourceReference> jsFileMap) {
        this.ec = ec;
        this.jsFileMap = jsFileMap;
    }

    private ThreadLocal<NashornScriptEngine> engineHolder = new ThreadLocal<NashornScriptEngine>() {
        @Override
        protected NashornScriptEngine initialValue() {
            NashornScriptEngine nashornScriptEngine = (NashornScriptEngine) new ScriptEngineManager().getEngineByName("nashorn");
            try {
                for (ResourceReference rr : jsFileMap.values()){
                    if (rr == null) continue;
                    ec.getLogger().info("jsFileMap: " + rr.getFileName());
                }

                Consumer<String> println = { s -> System.out.println(s) };
                ScriptContext sc = nashornScriptEngine.getContext();
                sc.setAttribute("println", println, ScriptContext.ENGINE_SCOPE);
                sc.setAttribute("ec", ec, ScriptContext.ENGINE_SCOPE);

                String base = "/Users/jimmy/workspace/opensource/moqui/moqui-framework/runtime/component"
                for (Map.Entry<String, ResourceReference> entry : jsFileMap.entrySet()){
                    if (entry.getValue() == null) continue;
                    ec.getLogger().info("Evaluating " + entry.getKey());

                    nashornScriptEngine.eval(new InputStreamReader(entry.getValue().openStream()));
                }

            } catch (ScriptException e) {
                throw new RuntimeException(e);
            }
            return nashornScriptEngine;
        }
    };

    public Object getState() {
        try {
            ec.getLogger().info("start server rendering getState");
            Object state = engineHolder.get().invokeFunction("getState");
            return state;
        } catch (Exception e) {
            throw new IllegalStateException("failed to get store state", e);
        }
    }

    public String render() {
        try {
            ec.getLogger().info("start server rendering");
            promiseResolved = false;

            // Object html = engineHolder.get().invokeFunction("renderServer")
            ScriptObjectMirror promise = (ScriptObjectMirror) engineHolder.get().invokeFunction("renderServer");
            Consumer<Object> fnResolve = { object ->
                promiseResolved = true
                html = object;
                System.out.println("------ from fnResolve (groovy)");
                System.out.println(String.valueOf(html));
            };

            System.out.println(fnResolve);

            Consumer<Object> fnReject = { object ->
                promiseResolved = true
                error = object;
                System.out.println("------ from fnReject");
                System.out.println(String.valueOf(error));
            };
            promise.callMember("then", fnResolve, fnReject);

            int interval = 50
            int i = 1
            while (!promiseResolved && i < 20) {
                System.out.println("---- sleep ${interval}ms... ${i}");
                i = i + 1
                Thread.sleep(interval);
            }

            System.out.println(promise.getMember("catch").getClass())

            return String.valueOf(html);
        } catch (Exception e) {
            throw new IllegalStateException("failed to render react", e);
        }
    }

    private Reader read(String location) {
        ResourceReference rr = ec.getResource().getLocationReference("component://react-ssr/screen/ReactSSRRoot/" + location);
        InputStream inputStream = rr.openStream();
        return new InputStreamReader(inputStream);
    }
}

        React react = new React(ec, jsFileMap)

        String contentHtml = react.render();
        // String contentHtml = ""
        ec.context.put("content", contentHtml);

        Object state = react.getState()

        ec.context.put("storeState", new groovy.json.JsonBuilder(state).toString());
        // ec.logger.info(state)
        System.out.println('--------- state')
        System.out.println(state)

        ]]></script>

    </actions>
    <widgets>
        <render-mode>
            <text type="html" template="true" location="component://react-ssr/screen/ReactSSRRoot/includes/index.html.ftl"/>
        </render-mode>
    </widgets>
</screen>
