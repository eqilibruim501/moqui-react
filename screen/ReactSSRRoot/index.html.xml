<?xml version="1.0" encoding="UTF-8"?>
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-2.0.xsd" require-authentication="false" track-artifact-hit="false"
        default-menu-include="false" standalone="true">
    <actions>
        <script><![CDATA[
            import jdk.nashorn.api.scripting.NashornScriptEngine
            import jdk.nashorn.api.scripting.ScriptObjectMirror
            import jdk.nashorn.api.scripting.JSObject
            import java.util.function.Consumer
            import java.util.function.Function

            import javax.script.ScriptEngineManager
            import javax.script.ScriptException
            import java.io.InputStream
            import java.io.InputStreamReader
            import java.io.Reader
            import java.util.List
            import org.moqui.resource.ResourceReference
            import org.moqui.context.ExecutionContext
            import com.fasterxml.jackson.databind.ObjectMapper

    Map<String, ResourceReference> jsFileMap = new LinkedHashMap<>()
    jsFileMap.put('nashorn-polyfill',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/nashorn-polyfill.js"))
    jsFileMap.put('nashorn-setTimeout',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/nashorn-setTimeout.js"))
    jsFileMap.put('vendor', null)
    jsFileMap.put('app', null)
    jsFileMap.put('print-app',
                  ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/static/print-app.js"))
    // jsFileMap.put('1.counter',null)

    Map<String, ResourceReference> cssFileMap = new LinkedHashMap<>()
    cssFileMap.put('app', null)

    ResourceReference rr = ec.resource.getLocationReference("component://react-ssr/screen/ReactSSRRoot/dist")
    for (ResourceReference fileRr in rr.getDirectoryEntries()) {
        if (!fileRr.isFile()) continue
        String fileName = fileRr.getFileName()
        if (fileName.endsWith(".js")) {
            if (fileName.startsWith("vendor.")) jsFileMap["vendor"] = fileRr
            if (fileName.startsWith("app.")) jsFileMap["app"] = fileRr
            if (fileName.startsWith("1.counter.")) jsFileMap["1.counter"] = fileRr
        } else if (fileName.endsWith(".css")) {
            if (fileName.startsWith("app.")) cssFileMap["app"] = fileRr
        }
    }

    ec.context.put('jsFileMap', jsFileMap)
    ec.context.put('cssFileMap', cssFileMap)

        import com.moqui.ssr.React

        React react = new React(ec, jsFileMap)

        String contentHtml = react.render();
        // String contentHtml = ""
        ec.context.put("content", contentHtml);

        Object state = react.getState()
        // ec.logger.info(state)
        System.out.println('--------- state')
        System.out.println(state)

        ]]></script>

    </actions>
    <widgets>
        <render-mode>
            <text type="html" template="true" location="component://react-ssr/screen/ReactSSRRoot/includes/index.html.ftl"/>
        </render-mode>
    </widgets>
</screen>
